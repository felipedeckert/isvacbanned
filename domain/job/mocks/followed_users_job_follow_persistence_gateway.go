// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"isvacbanned/domain/entities"
	"isvacbanned/domain/job"
	"sync"
)

// Ensure, that FollowedUsersJobFollowPersistenceGatewayMock does implement job.FollowedUsersJobFollowPersistenceGateway.
// If this is not the case, regenerate this file with moq.
var _ job.FollowedUsersJobFollowPersistenceGateway = &FollowedUsersJobFollowPersistenceGatewayMock{}

// FollowedUsersJobFollowPersistenceGatewayMock is a mock implementation of job.FollowedUsersJobFollowPersistenceGateway.
//
// 	func TestSomethingThatUsesFollowedUsersJobFollowPersistenceGateway(t *testing.T) {
//
// 		// make and configure a mocked job.FollowedUsersJobFollowPersistenceGateway
// 		mockedFollowedUsersJobFollowPersistenceGateway := &FollowedUsersJobFollowPersistenceGatewayMock{
// 			GetAllIncompleteFollowedUsersFunc: func(ctx context.Context) (map[int64][]entities.UsersFollowed, error) {
// 				panic("mock out the GetAllIncompleteFollowedUsers method")
// 			},
// 			SetCurrNicknameFunc: func(ctx context.Context, userID int64, sanitizedActualNickname string) error {
// 				panic("mock out the SetCurrNickname method")
// 			},
// 			SetFollowedUserToCompletedFunc: func(ctx context.Context, id []int64)  {
// 				panic("mock out the SetFollowedUserToCompleted method")
// 			},
// 		}
//
// 		// use mockedFollowedUsersJobFollowPersistenceGateway in code that requires job.FollowedUsersJobFollowPersistenceGateway
// 		// and then make assertions.
//
// 	}
type FollowedUsersJobFollowPersistenceGatewayMock struct {
	// GetAllIncompleteFollowedUsersFunc mocks the GetAllIncompleteFollowedUsers method.
	GetAllIncompleteFollowedUsersFunc func(ctx context.Context) (map[int64][]entities.UsersFollowed, error)

	// SetCurrNicknameFunc mocks the SetCurrNickname method.
	SetCurrNicknameFunc func(ctx context.Context, userID int64, sanitizedActualNickname string) error

	// SetFollowedUserToCompletedFunc mocks the SetFollowedUserToCompleted method.
	SetFollowedUserToCompletedFunc func(ctx context.Context, id []int64)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllIncompleteFollowedUsers holds details about calls to the GetAllIncompleteFollowedUsers method.
		GetAllIncompleteFollowedUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetCurrNickname holds details about calls to the SetCurrNickname method.
		SetCurrNickname []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// SanitizedActualNickname is the sanitizedActualNickname argument value.
			SanitizedActualNickname string
		}
		// SetFollowedUserToCompleted holds details about calls to the SetFollowedUserToCompleted method.
		SetFollowedUserToCompleted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID []int64
		}
	}
	lockGetAllIncompleteFollowedUsers sync.RWMutex
	lockSetCurrNickname               sync.RWMutex
	lockSetFollowedUserToCompleted    sync.RWMutex
}

// GetAllIncompleteFollowedUsers calls GetAllIncompleteFollowedUsersFunc.
func (mock *FollowedUsersJobFollowPersistenceGatewayMock) GetAllIncompleteFollowedUsers(ctx context.Context) (map[int64][]entities.UsersFollowed, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllIncompleteFollowedUsers.Lock()
	mock.calls.GetAllIncompleteFollowedUsers = append(mock.calls.GetAllIncompleteFollowedUsers, callInfo)
	mock.lockGetAllIncompleteFollowedUsers.Unlock()
	if mock.GetAllIncompleteFollowedUsersFunc == nil {
		var (
			int64ToUsersFollowedsOut map[int64][]entities.UsersFollowed
			errOut                   error
		)
		return int64ToUsersFollowedsOut, errOut
	}
	return mock.GetAllIncompleteFollowedUsersFunc(ctx)
}

// GetAllIncompleteFollowedUsersCalls gets all the calls that were made to GetAllIncompleteFollowedUsers.
// Check the length with:
//     len(mockedFollowedUsersJobFollowPersistenceGateway.GetAllIncompleteFollowedUsersCalls())
func (mock *FollowedUsersJobFollowPersistenceGatewayMock) GetAllIncompleteFollowedUsersCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllIncompleteFollowedUsers.RLock()
	calls = mock.calls.GetAllIncompleteFollowedUsers
	mock.lockGetAllIncompleteFollowedUsers.RUnlock()
	return calls
}

// SetCurrNickname calls SetCurrNicknameFunc.
func (mock *FollowedUsersJobFollowPersistenceGatewayMock) SetCurrNickname(ctx context.Context, userID int64, sanitizedActualNickname string) error {
	callInfo := struct {
		Ctx                     context.Context
		UserID                  int64
		SanitizedActualNickname string
	}{
		Ctx:                     ctx,
		UserID:                  userID,
		SanitizedActualNickname: sanitizedActualNickname,
	}
	mock.lockSetCurrNickname.Lock()
	mock.calls.SetCurrNickname = append(mock.calls.SetCurrNickname, callInfo)
	mock.lockSetCurrNickname.Unlock()
	if mock.SetCurrNicknameFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SetCurrNicknameFunc(ctx, userID, sanitizedActualNickname)
}

// SetCurrNicknameCalls gets all the calls that were made to SetCurrNickname.
// Check the length with:
//     len(mockedFollowedUsersJobFollowPersistenceGateway.SetCurrNicknameCalls())
func (mock *FollowedUsersJobFollowPersistenceGatewayMock) SetCurrNicknameCalls() []struct {
	Ctx                     context.Context
	UserID                  int64
	SanitizedActualNickname string
} {
	var calls []struct {
		Ctx                     context.Context
		UserID                  int64
		SanitizedActualNickname string
	}
	mock.lockSetCurrNickname.RLock()
	calls = mock.calls.SetCurrNickname
	mock.lockSetCurrNickname.RUnlock()
	return calls
}

// SetFollowedUserToCompleted calls SetFollowedUserToCompletedFunc.
func (mock *FollowedUsersJobFollowPersistenceGatewayMock) SetFollowedUserToCompleted(ctx context.Context, id []int64) {
	callInfo := struct {
		Ctx context.Context
		ID  []int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSetFollowedUserToCompleted.Lock()
	mock.calls.SetFollowedUserToCompleted = append(mock.calls.SetFollowedUserToCompleted, callInfo)
	mock.lockSetFollowedUserToCompleted.Unlock()
	if mock.SetFollowedUserToCompletedFunc == nil {
		return
	}
	mock.SetFollowedUserToCompletedFunc(ctx, id)
}

// SetFollowedUserToCompletedCalls gets all the calls that were made to SetFollowedUserToCompleted.
// Check the length with:
//     len(mockedFollowedUsersJobFollowPersistenceGateway.SetFollowedUserToCompletedCalls())
func (mock *FollowedUsersJobFollowPersistenceGatewayMock) SetFollowedUserToCompletedCalls() []struct {
	Ctx context.Context
	ID  []int64
} {
	var calls []struct {
		Ctx context.Context
		ID  []int64
	}
	mock.lockSetFollowedUserToCompleted.RLock()
	calls = mock.calls.SetFollowedUserToCompleted
	mock.lockSetFollowedUserToCompleted.RUnlock()
	return calls
}

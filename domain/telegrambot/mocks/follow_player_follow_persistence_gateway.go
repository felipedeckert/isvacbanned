// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"isvacbanned/domain/entities"
	"isvacbanned/domain/telegrambot"
	"sync"
)

// Ensure, that FollowPlayerFollowPersistenceGatewayMock does implement telegrambot.FollowPlayerFollowPersistenceGateway.
// If this is not the case, regenerate this file with moq.
var _ telegrambot.FollowPlayerFollowPersistenceGateway = &FollowPlayerFollowPersistenceGatewayMock{}

// FollowPlayerFollowPersistenceGatewayMock is a mock implementation of telegrambot.FollowPlayerFollowPersistenceGateway.
//
// 	func TestSomethingThatUsesFollowPlayerFollowPersistenceGateway(t *testing.T) {
//
// 		// make and configure a mocked telegrambot.FollowPlayerFollowPersistenceGateway
// 		mockedFollowPlayerFollowPersistenceGateway := &FollowPlayerFollowPersistenceGatewayMock{
// 			FollowSteamUserFunc: func(ctx context.Context, chatID int64, steamID string, currNickname string, userID int64) (int64, error) {
// 				panic("mock out the FollowSteamUser method")
// 			},
// 			GetFollowerCountBySteamIDFunc: func(ctx context.Context, steamID string) (int64, error) {
// 				panic("mock out the GetFollowerCountBySteamID method")
// 			},
// 			GetUsersFollowedFunc: func(ctx context.Context, userID int64) ([]entities.UsersFollowed, error) {
// 				panic("mock out the GetUsersFollowed method")
// 			},
// 			IsFollowedFunc: func(ctx context.Context, steamID string, userID int64) (string, int64, error) {
// 				panic("mock out the IsFollowed method")
// 			},
// 			SetFollowedUserToCompletedFunc: func(ctx context.Context, id []int64)  {
// 				panic("mock out the SetFollowedUserToCompleted method")
// 			},
// 		}
//
// 		// use mockedFollowPlayerFollowPersistenceGateway in code that requires telegrambot.FollowPlayerFollowPersistenceGateway
// 		// and then make assertions.
//
// 	}
type FollowPlayerFollowPersistenceGatewayMock struct {
	// FollowSteamUserFunc mocks the FollowSteamUser method.
	FollowSteamUserFunc func(ctx context.Context, chatID int64, steamID string, currNickname string, userID int64) (int64, error)

	// GetFollowerCountBySteamIDFunc mocks the GetFollowerCountBySteamID method.
	GetFollowerCountBySteamIDFunc func(ctx context.Context, steamID string) (int64, error)

	// GetUsersFollowedFunc mocks the GetUsersFollowed method.
	GetUsersFollowedFunc func(ctx context.Context, userID int64) ([]entities.UsersFollowed, error)

	// IsFollowedFunc mocks the IsFollowed method.
	IsFollowedFunc func(ctx context.Context, steamID string, userID int64) (string, int64, error)

	// SetFollowedUserToCompletedFunc mocks the SetFollowedUserToCompleted method.
	SetFollowedUserToCompletedFunc func(ctx context.Context, id []int64)

	// calls tracks calls to the methods.
	calls struct {
		// FollowSteamUser holds details about calls to the FollowSteamUser method.
		FollowSteamUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatID is the chatID argument value.
			ChatID int64
			// SteamID is the steamID argument value.
			SteamID string
			// CurrNickname is the currNickname argument value.
			CurrNickname string
			// UserID is the userID argument value.
			UserID int64
		}
		// GetFollowerCountBySteamID holds details about calls to the GetFollowerCountBySteamID method.
		GetFollowerCountBySteamID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SteamID is the steamID argument value.
			SteamID string
		}
		// GetUsersFollowed holds details about calls to the GetUsersFollowed method.
		GetUsersFollowed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
		// IsFollowed holds details about calls to the IsFollowed method.
		IsFollowed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SteamID is the steamID argument value.
			SteamID string
			// UserID is the userID argument value.
			UserID int64
		}
		// SetFollowedUserToCompleted holds details about calls to the SetFollowedUserToCompleted method.
		SetFollowedUserToCompleted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID []int64
		}
	}
	lockFollowSteamUser            sync.RWMutex
	lockGetFollowerCountBySteamID  sync.RWMutex
	lockGetUsersFollowed           sync.RWMutex
	lockIsFollowed                 sync.RWMutex
	lockSetFollowedUserToCompleted sync.RWMutex
}

// FollowSteamUser calls FollowSteamUserFunc.
func (mock *FollowPlayerFollowPersistenceGatewayMock) FollowSteamUser(ctx context.Context, chatID int64, steamID string, currNickname string, userID int64) (int64, error) {
	callInfo := struct {
		Ctx          context.Context
		ChatID       int64
		SteamID      string
		CurrNickname string
		UserID       int64
	}{
		Ctx:          ctx,
		ChatID:       chatID,
		SteamID:      steamID,
		CurrNickname: currNickname,
		UserID:       userID,
	}
	mock.lockFollowSteamUser.Lock()
	mock.calls.FollowSteamUser = append(mock.calls.FollowSteamUser, callInfo)
	mock.lockFollowSteamUser.Unlock()
	if mock.FollowSteamUserFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.FollowSteamUserFunc(ctx, chatID, steamID, currNickname, userID)
}

// FollowSteamUserCalls gets all the calls that were made to FollowSteamUser.
// Check the length with:
//     len(mockedFollowPlayerFollowPersistenceGateway.FollowSteamUserCalls())
func (mock *FollowPlayerFollowPersistenceGatewayMock) FollowSteamUserCalls() []struct {
	Ctx          context.Context
	ChatID       int64
	SteamID      string
	CurrNickname string
	UserID       int64
} {
	var calls []struct {
		Ctx          context.Context
		ChatID       int64
		SteamID      string
		CurrNickname string
		UserID       int64
	}
	mock.lockFollowSteamUser.RLock()
	calls = mock.calls.FollowSteamUser
	mock.lockFollowSteamUser.RUnlock()
	return calls
}

// GetFollowerCountBySteamID calls GetFollowerCountBySteamIDFunc.
func (mock *FollowPlayerFollowPersistenceGatewayMock) GetFollowerCountBySteamID(ctx context.Context, steamID string) (int64, error) {
	callInfo := struct {
		Ctx     context.Context
		SteamID string
	}{
		Ctx:     ctx,
		SteamID: steamID,
	}
	mock.lockGetFollowerCountBySteamID.Lock()
	mock.calls.GetFollowerCountBySteamID = append(mock.calls.GetFollowerCountBySteamID, callInfo)
	mock.lockGetFollowerCountBySteamID.Unlock()
	if mock.GetFollowerCountBySteamIDFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.GetFollowerCountBySteamIDFunc(ctx, steamID)
}

// GetFollowerCountBySteamIDCalls gets all the calls that were made to GetFollowerCountBySteamID.
// Check the length with:
//     len(mockedFollowPlayerFollowPersistenceGateway.GetFollowerCountBySteamIDCalls())
func (mock *FollowPlayerFollowPersistenceGatewayMock) GetFollowerCountBySteamIDCalls() []struct {
	Ctx     context.Context
	SteamID string
} {
	var calls []struct {
		Ctx     context.Context
		SteamID string
	}
	mock.lockGetFollowerCountBySteamID.RLock()
	calls = mock.calls.GetFollowerCountBySteamID
	mock.lockGetFollowerCountBySteamID.RUnlock()
	return calls
}

// GetUsersFollowed calls GetUsersFollowedFunc.
func (mock *FollowPlayerFollowPersistenceGatewayMock) GetUsersFollowed(ctx context.Context, userID int64) ([]entities.UsersFollowed, error) {
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUsersFollowed.Lock()
	mock.calls.GetUsersFollowed = append(mock.calls.GetUsersFollowed, callInfo)
	mock.lockGetUsersFollowed.Unlock()
	if mock.GetUsersFollowedFunc == nil {
		var (
			usersFollowedsOut []entities.UsersFollowed
			errOut            error
		)
		return usersFollowedsOut, errOut
	}
	return mock.GetUsersFollowedFunc(ctx, userID)
}

// GetUsersFollowedCalls gets all the calls that were made to GetUsersFollowed.
// Check the length with:
//     len(mockedFollowPlayerFollowPersistenceGateway.GetUsersFollowedCalls())
func (mock *FollowPlayerFollowPersistenceGatewayMock) GetUsersFollowedCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockGetUsersFollowed.RLock()
	calls = mock.calls.GetUsersFollowed
	mock.lockGetUsersFollowed.RUnlock()
	return calls
}

// IsFollowed calls IsFollowedFunc.
func (mock *FollowPlayerFollowPersistenceGatewayMock) IsFollowed(ctx context.Context, steamID string, userID int64) (string, int64, error) {
	callInfo := struct {
		Ctx     context.Context
		SteamID string
		UserID  int64
	}{
		Ctx:     ctx,
		SteamID: steamID,
		UserID:  userID,
	}
	mock.lockIsFollowed.Lock()
	mock.calls.IsFollowed = append(mock.calls.IsFollowed, callInfo)
	mock.lockIsFollowed.Unlock()
	if mock.IsFollowedFunc == nil {
		var (
			sOut   string
			nOut   int64
			errOut error
		)
		return sOut, nOut, errOut
	}
	return mock.IsFollowedFunc(ctx, steamID, userID)
}

// IsFollowedCalls gets all the calls that were made to IsFollowed.
// Check the length with:
//     len(mockedFollowPlayerFollowPersistenceGateway.IsFollowedCalls())
func (mock *FollowPlayerFollowPersistenceGatewayMock) IsFollowedCalls() []struct {
	Ctx     context.Context
	SteamID string
	UserID  int64
} {
	var calls []struct {
		Ctx     context.Context
		SteamID string
		UserID  int64
	}
	mock.lockIsFollowed.RLock()
	calls = mock.calls.IsFollowed
	mock.lockIsFollowed.RUnlock()
	return calls
}

// SetFollowedUserToCompleted calls SetFollowedUserToCompletedFunc.
func (mock *FollowPlayerFollowPersistenceGatewayMock) SetFollowedUserToCompleted(ctx context.Context, id []int64) {
	callInfo := struct {
		Ctx context.Context
		ID  []int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSetFollowedUserToCompleted.Lock()
	mock.calls.SetFollowedUserToCompleted = append(mock.calls.SetFollowedUserToCompleted, callInfo)
	mock.lockSetFollowedUserToCompleted.Unlock()
	if mock.SetFollowedUserToCompletedFunc == nil {
		return
	}
	mock.SetFollowedUserToCompletedFunc(ctx, id)
}

// SetFollowedUserToCompletedCalls gets all the calls that were made to SetFollowedUserToCompleted.
// Check the length with:
//     len(mockedFollowPlayerFollowPersistenceGateway.SetFollowedUserToCompletedCalls())
func (mock *FollowPlayerFollowPersistenceGatewayMock) SetFollowedUserToCompletedCalls() []struct {
	Ctx context.Context
	ID  []int64
} {
	var calls []struct {
		Ctx context.Context
		ID  []int64
	}
	mock.lockSetFollowedUserToCompleted.RLock()
	calls = mock.calls.SetFollowedUserToCompleted
	mock.lockSetFollowedUserToCompleted.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"isvacbanned/domain/entities"
	"isvacbanned/domain/telegrambot"
	"sync"
)

// Ensure, that FollowPlayerSteamGatewayMock does implement telegrambot.FollowPlayerSteamGateway.
// If this is not the case, regenerate this file with moq.
var _ telegrambot.FollowPlayerSteamGateway = &FollowPlayerSteamGatewayMock{}

// FollowPlayerSteamGatewayMock is a mock implementation of telegrambot.FollowPlayerSteamGateway.
//
// 	func TestSomethingThatUsesFollowPlayerSteamGateway(t *testing.T) {
//
// 		// make and configure a mocked telegrambot.FollowPlayerSteamGateway
// 		mockedFollowPlayerSteamGateway := &FollowPlayerSteamGatewayMock{
// 			GetPlayerSteamIDFunc: func(playerName string) (string, error) {
// 				panic("mock out the GetPlayerSteamID method")
// 			},
// 			GetPlayersCurrentNicknamesFunc: func(steamIDs ...string) (entities.PlayerInfo, error) {
// 				panic("mock out the GetPlayersCurrentNicknames method")
// 			},
// 			GetPlayersStatusFunc: func(steamIDs ...string) (entities.Player, error) {
// 				panic("mock out the GetPlayersStatus method")
// 			},
// 		}
//
// 		// use mockedFollowPlayerSteamGateway in code that requires telegrambot.FollowPlayerSteamGateway
// 		// and then make assertions.
//
// 	}
type FollowPlayerSteamGatewayMock struct {
	// GetPlayerSteamIDFunc mocks the GetPlayerSteamID method.
	GetPlayerSteamIDFunc func(playerName string) (string, error)

	// GetPlayersCurrentNicknamesFunc mocks the GetPlayersCurrentNicknames method.
	GetPlayersCurrentNicknamesFunc func(steamIDs ...string) (entities.PlayerInfo, error)

	// GetPlayersStatusFunc mocks the GetPlayersStatus method.
	GetPlayersStatusFunc func(steamIDs ...string) (entities.Player, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPlayerSteamID holds details about calls to the GetPlayerSteamID method.
		GetPlayerSteamID []struct {
			// PlayerName is the playerName argument value.
			PlayerName string
		}
		// GetPlayersCurrentNicknames holds details about calls to the GetPlayersCurrentNicknames method.
		GetPlayersCurrentNicknames []struct {
			// SteamIDs is the steamIDs argument value.
			SteamIDs []string
		}
		// GetPlayersStatus holds details about calls to the GetPlayersStatus method.
		GetPlayersStatus []struct {
			// SteamIDs is the steamIDs argument value.
			SteamIDs []string
		}
	}
	lockGetPlayerSteamID           sync.RWMutex
	lockGetPlayersCurrentNicknames sync.RWMutex
	lockGetPlayersStatus           sync.RWMutex
}

// GetPlayerSteamID calls GetPlayerSteamIDFunc.
func (mock *FollowPlayerSteamGatewayMock) GetPlayerSteamID(playerName string) (string, error) {
	callInfo := struct {
		PlayerName string
	}{
		PlayerName: playerName,
	}
	mock.lockGetPlayerSteamID.Lock()
	mock.calls.GetPlayerSteamID = append(mock.calls.GetPlayerSteamID, callInfo)
	mock.lockGetPlayerSteamID.Unlock()
	if mock.GetPlayerSteamIDFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.GetPlayerSteamIDFunc(playerName)
}

// GetPlayerSteamIDCalls gets all the calls that were made to GetPlayerSteamID.
// Check the length with:
//     len(mockedFollowPlayerSteamGateway.GetPlayerSteamIDCalls())
func (mock *FollowPlayerSteamGatewayMock) GetPlayerSteamIDCalls() []struct {
	PlayerName string
} {
	var calls []struct {
		PlayerName string
	}
	mock.lockGetPlayerSteamID.RLock()
	calls = mock.calls.GetPlayerSteamID
	mock.lockGetPlayerSteamID.RUnlock()
	return calls
}

// GetPlayersCurrentNicknames calls GetPlayersCurrentNicknamesFunc.
func (mock *FollowPlayerSteamGatewayMock) GetPlayersCurrentNicknames(steamIDs ...string) (entities.PlayerInfo, error) {
	callInfo := struct {
		SteamIDs []string
	}{
		SteamIDs: steamIDs,
	}
	mock.lockGetPlayersCurrentNicknames.Lock()
	mock.calls.GetPlayersCurrentNicknames = append(mock.calls.GetPlayersCurrentNicknames, callInfo)
	mock.lockGetPlayersCurrentNicknames.Unlock()
	if mock.GetPlayersCurrentNicknamesFunc == nil {
		var (
			playerInfoOut entities.PlayerInfo
			errOut        error
		)
		return playerInfoOut, errOut
	}
	return mock.GetPlayersCurrentNicknamesFunc(steamIDs...)
}

// GetPlayersCurrentNicknamesCalls gets all the calls that were made to GetPlayersCurrentNicknames.
// Check the length with:
//     len(mockedFollowPlayerSteamGateway.GetPlayersCurrentNicknamesCalls())
func (mock *FollowPlayerSteamGatewayMock) GetPlayersCurrentNicknamesCalls() []struct {
	SteamIDs []string
} {
	var calls []struct {
		SteamIDs []string
	}
	mock.lockGetPlayersCurrentNicknames.RLock()
	calls = mock.calls.GetPlayersCurrentNicknames
	mock.lockGetPlayersCurrentNicknames.RUnlock()
	return calls
}

// GetPlayersStatus calls GetPlayersStatusFunc.
func (mock *FollowPlayerSteamGatewayMock) GetPlayersStatus(steamIDs ...string) (entities.Player, error) {
	callInfo := struct {
		SteamIDs []string
	}{
		SteamIDs: steamIDs,
	}
	mock.lockGetPlayersStatus.Lock()
	mock.calls.GetPlayersStatus = append(mock.calls.GetPlayersStatus, callInfo)
	mock.lockGetPlayersStatus.Unlock()
	if mock.GetPlayersStatusFunc == nil {
		var (
			playerOut entities.Player
			errOut    error
		)
		return playerOut, errOut
	}
	return mock.GetPlayersStatusFunc(steamIDs...)
}

// GetPlayersStatusCalls gets all the calls that were made to GetPlayersStatus.
// Check the length with:
//     len(mockedFollowPlayerSteamGateway.GetPlayersStatusCalls())
func (mock *FollowPlayerSteamGatewayMock) GetPlayersStatusCalls() []struct {
	SteamIDs []string
} {
	var calls []struct {
		SteamIDs []string
	}
	mock.lockGetPlayersStatus.RLock()
	calls = mock.calls.GetPlayersStatus
	mock.lockGetPlayersStatus.RUnlock()
	return calls
}

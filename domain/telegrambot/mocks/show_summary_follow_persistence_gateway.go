// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"isvacbanned/domain/telegrambot"
	"sync"
)

// Ensure, that ShowSummaryFollowPersistenceGatewayMock does implement telegrambot.ShowSummaryFollowPersistenceGateway.
// If this is not the case, regenerate this file with moq.
var _ telegrambot.ShowSummaryFollowPersistenceGateway = &ShowSummaryFollowPersistenceGatewayMock{}

// ShowSummaryFollowPersistenceGatewayMock is a mock implementation of telegrambot.ShowSummaryFollowPersistenceGateway.
//
// 	func TestSomethingThatUsesShowSummaryFollowPersistenceGateway(t *testing.T) {
//
// 		// make and configure a mocked telegrambot.ShowSummaryFollowPersistenceGateway
// 		mockedShowSummaryFollowPersistenceGateway := &ShowSummaryFollowPersistenceGatewayMock{
// 			GetUsersFollowedSummaryFunc: func(ctx context.Context, userID int64) (map[bool]int, error) {
// 				panic("mock out the GetUsersFollowedSummary method")
// 			},
// 		}
//
// 		// use mockedShowSummaryFollowPersistenceGateway in code that requires telegrambot.ShowSummaryFollowPersistenceGateway
// 		// and then make assertions.
//
// 	}
type ShowSummaryFollowPersistenceGatewayMock struct {
	// GetUsersFollowedSummaryFunc mocks the GetUsersFollowedSummary method.
	GetUsersFollowedSummaryFunc func(ctx context.Context, userID int64) (map[bool]int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUsersFollowedSummary holds details about calls to the GetUsersFollowedSummary method.
		GetUsersFollowedSummary []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
		}
	}
	lockGetUsersFollowedSummary sync.RWMutex
}

// GetUsersFollowedSummary calls GetUsersFollowedSummaryFunc.
func (mock *ShowSummaryFollowPersistenceGatewayMock) GetUsersFollowedSummary(ctx context.Context, userID int64) (map[bool]int, error) {
	callInfo := struct {
		Ctx    context.Context
		UserID int64
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUsersFollowedSummary.Lock()
	mock.calls.GetUsersFollowedSummary = append(mock.calls.GetUsersFollowedSummary, callInfo)
	mock.lockGetUsersFollowedSummary.Unlock()
	if mock.GetUsersFollowedSummaryFunc == nil {
		var (
			boolToIntOut map[bool]int
			errOut       error
		)
		return boolToIntOut, errOut
	}
	return mock.GetUsersFollowedSummaryFunc(ctx, userID)
}

// GetUsersFollowedSummaryCalls gets all the calls that were made to GetUsersFollowedSummary.
// Check the length with:
//     len(mockedShowSummaryFollowPersistenceGateway.GetUsersFollowedSummaryCalls())
func (mock *ShowSummaryFollowPersistenceGatewayMock) GetUsersFollowedSummaryCalls() []struct {
	Ctx    context.Context
	UserID int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID int64
	}
	mock.lockGetUsersFollowedSummary.RLock()
	calls = mock.calls.GetUsersFollowedSummary
	mock.lockGetUsersFollowedSummary.RUnlock()
	return calls
}

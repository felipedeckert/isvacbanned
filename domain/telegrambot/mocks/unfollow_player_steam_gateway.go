// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"isvacbanned/domain/telegrambot"
	"sync"
)

// Ensure, that UnfollowPlayerSteamGatewayMock does implement telegrambot.UnfollowPlayerSteamGateway.
// If this is not the case, regenerate this file with moq.
var _ telegrambot.UnfollowPlayerSteamGateway = &UnfollowPlayerSteamGatewayMock{}

// UnfollowPlayerSteamGatewayMock is a mock implementation of telegrambot.UnfollowPlayerSteamGateway.
//
// 	func TestSomethingThatUsesUnfollowPlayerSteamGateway(t *testing.T) {
//
// 		// make and configure a mocked telegrambot.UnfollowPlayerSteamGateway
// 		mockedUnfollowPlayerSteamGateway := &UnfollowPlayerSteamGatewayMock{
// 			GetPlayerSteamIDFunc: func(playerName string) (string, error) {
// 				panic("mock out the GetPlayerSteamID method")
// 			},
// 		}
//
// 		// use mockedUnfollowPlayerSteamGateway in code that requires telegrambot.UnfollowPlayerSteamGateway
// 		// and then make assertions.
//
// 	}
type UnfollowPlayerSteamGatewayMock struct {
	// GetPlayerSteamIDFunc mocks the GetPlayerSteamID method.
	GetPlayerSteamIDFunc func(playerName string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPlayerSteamID holds details about calls to the GetPlayerSteamID method.
		GetPlayerSteamID []struct {
			// PlayerName is the playerName argument value.
			PlayerName string
		}
	}
	lockGetPlayerSteamID sync.RWMutex
}

// GetPlayerSteamID calls GetPlayerSteamIDFunc.
func (mock *UnfollowPlayerSteamGatewayMock) GetPlayerSteamID(playerName string) (string, error) {
	callInfo := struct {
		PlayerName string
	}{
		PlayerName: playerName,
	}
	mock.lockGetPlayerSteamID.Lock()
	mock.calls.GetPlayerSteamID = append(mock.calls.GetPlayerSteamID, callInfo)
	mock.lockGetPlayerSteamID.Unlock()
	if mock.GetPlayerSteamIDFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.GetPlayerSteamIDFunc(playerName)
}

// GetPlayerSteamIDCalls gets all the calls that were made to GetPlayerSteamID.
// Check the length with:
//     len(mockedUnfollowPlayerSteamGateway.GetPlayerSteamIDCalls())
func (mock *UnfollowPlayerSteamGatewayMock) GetPlayerSteamIDCalls() []struct {
	PlayerName string
} {
	var calls []struct {
		PlayerName string
	}
	mock.lockGetPlayerSteamID.RLock()
	calls = mock.calls.GetPlayerSteamID
	mock.lockGetPlayerSteamID.RUnlock()
	return calls
}

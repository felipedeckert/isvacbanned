// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"isvacbanned/service"
	"sync"
)

// Ensure, that PlayerServiceInterfaceMock does implement service.PlayerServiceInterface.
// If this is not the case, regenerate this file with moq.
var _ service.PlayerServiceInterface = &PlayerServiceInterfaceMock{}

// PlayerServiceInterfaceMock is a mock implementation of service.PlayerServiceInterface.
//
// 	func TestSomethingThatUsesPlayerServiceInterface(t *testing.T) {
//
// 		// make and configure a mocked service.PlayerServiceInterface
// 		mockedPlayerServiceInterface := &PlayerServiceInterfaceMock{
// 			GetPlayerStatusFunc: func(steamIDs ...string) (service.Player, error) {
// 				panic("mock out the GetPlayerStatus method")
// 			},
// 			GetPlayersCurrentNicknameFunc: func(steamID ...string) (service.PlayerInfo, error) {
// 				panic("mock out the GetPlayersCurrentNickname method")
// 			},
// 		}
//
// 		// use mockedPlayerServiceInterface in code that requires service.PlayerServiceInterface
// 		// and then make assertions.
//
// 	}
type PlayerServiceInterfaceMock struct {
	// GetPlayerStatusFunc mocks the GetPlayerStatus method.
	GetPlayerStatusFunc func(steamIDs ...string) (service.Player, error)

	// GetPlayersCurrentNicknameFunc mocks the GetPlayersCurrentNickname method.
	GetPlayersCurrentNicknameFunc func(steamID ...string) (service.PlayerInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPlayerStatus holds details about calls to the GetPlayerStatus method.
		GetPlayerStatus []struct {
			// SteamIDs is the steamIDs argument value.
			SteamIDs []string
		}
		// GetPlayersCurrentNickname holds details about calls to the GetPlayersCurrentNickname method.
		GetPlayersCurrentNickname []struct {
			// SteamID is the steamID argument value.
			SteamID []string
		}
	}
	lockGetPlayerStatus           sync.RWMutex
	lockGetPlayersCurrentNickname sync.RWMutex
}

// GetPlayerStatus calls GetPlayerStatusFunc.
func (mock *PlayerServiceInterfaceMock) GetPlayerStatus(steamIDs ...string) (service.Player, error) {
	callInfo := struct {
		SteamIDs []string
	}{
		SteamIDs: steamIDs,
	}
	mock.lockGetPlayerStatus.Lock()
	mock.calls.GetPlayerStatus = append(mock.calls.GetPlayerStatus, callInfo)
	mock.lockGetPlayerStatus.Unlock()
	if mock.GetPlayerStatusFunc == nil {
		var (
			playerOut service.Player
			errOut    error
		)
		return playerOut, errOut
	}
	return mock.GetPlayerStatusFunc(steamIDs...)
}

// GetPlayerStatusCalls gets all the calls that were made to GetPlayerStatus.
// Check the length with:
//     len(mockedPlayerServiceInterface.GetPlayerStatusCalls())
func (mock *PlayerServiceInterfaceMock) GetPlayerStatusCalls() []struct {
	SteamIDs []string
} {
	var calls []struct {
		SteamIDs []string
	}
	mock.lockGetPlayerStatus.RLock()
	calls = mock.calls.GetPlayerStatus
	mock.lockGetPlayerStatus.RUnlock()
	return calls
}

// GetPlayersCurrentNickname calls GetPlayersCurrentNicknameFunc.
func (mock *PlayerServiceInterfaceMock) GetPlayersCurrentNickname(steamID ...string) (service.PlayerInfo, error) {
	callInfo := struct {
		SteamID []string
	}{
		SteamID: steamID,
	}
	mock.lockGetPlayersCurrentNickname.Lock()
	mock.calls.GetPlayersCurrentNickname = append(mock.calls.GetPlayersCurrentNickname, callInfo)
	mock.lockGetPlayersCurrentNickname.Unlock()
	if mock.GetPlayersCurrentNicknameFunc == nil {
		var (
			playerInfoOut service.PlayerInfo
			errOut        error
		)
		return playerInfoOut, errOut
	}
	return mock.GetPlayersCurrentNicknameFunc(steamID...)
}

// GetPlayersCurrentNicknameCalls gets all the calls that were made to GetPlayersCurrentNickname.
// Check the length with:
//     len(mockedPlayerServiceInterface.GetPlayersCurrentNicknameCalls())
func (mock *PlayerServiceInterfaceMock) GetPlayersCurrentNicknameCalls() []struct {
	SteamID []string
} {
	var calls []struct {
		SteamID []string
	}
	mock.lockGetPlayersCurrentNickname.RLock()
	calls = mock.calls.GetPlayersCurrentNickname
	mock.lockGetPlayersCurrentNickname.RUnlock()
	return calls
}
